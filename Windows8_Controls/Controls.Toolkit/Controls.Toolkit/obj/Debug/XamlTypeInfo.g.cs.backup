//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Controls.Toolkit.Controls_Toolkit_XamlTypeInfo
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks","4.0.0.0")]
    public sealed class XamlMetaDataProvider: global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Controls.Toolkit.Controls_Toolkit_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_MonthConverter() { return new global::Controls.Toolkit.MonthConverter(); }

        private object Activate_4_TimerSlider() { return new global::Controls.Toolkit.TimerSlider(); }

        private object Activate_7_TimePicker() { return new global::Controls.Toolkit.TimePicker(); }

        private object Activate_8_CalendarPicker() { return new global::Controls.Toolkit.CalendarPicker(); }

        private object Activate_10_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Day>(); }

        private object Activate_11_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Controls.Toolkit.Day>(); }

        private object Activate_12_Day() { return new global::Controls.Toolkit.Day(); }

        private object Activate_14_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Month>(); }

        private object Activate_15_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Controls.Toolkit.Month>(); }

        private object Activate_16_Month() { return new global::Controls.Toolkit.Month(); }

        private object Activate_17_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Year>(); }

        private object Activate_18_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Controls.Toolkit.Year>(); }

        private object Activate_19_Year() { return new global::Controls.Toolkit.Year(); }

        private object Activate_20_CalendarHeader() { return new global::Controls.Toolkit.CalendarHeader(); }

        private object Activate_21_CalendarYearHeadar() { return new global::Controls.Toolkit.CalendarYearHeadar(); }

        private object Activate_22_CalendarItemButton() { return new global::Controls.Toolkit.CalendarItemButton(); }

        private object Activate_23_CalendarItemMonthButton() { return new global::Controls.Toolkit.CalendarItemMonthButton(); }

        private object Activate_24_ContentTextBox() { return new global::Controls.Toolkit.ContentTextBox(); }

        private object Activate_25_ContentTextBoxButton() { return new global::Controls.Toolkit.ContentTextBoxButton(); }

        private object Activate_26_Knob() { return new global::Controls.Toolkit.Knob(); }

        private object Activate_27_MasonryPanel() { return new global::Controls.Toolkit.MasonryPanel(); }

        private object Activate_28_List() { return new global::System.Collections.Generic.List<global::Controls.Toolkit.MasonryItem>(); }

        private object Activate_29_MasonryItem() { return new global::Controls.Toolkit.MasonryItem(); }

        private object Activate_32_RangeSlider() { return new global::Controls.Toolkit.RangeSlider(); }

        private object Activate_33_SemanticZoomOutColumn() { return new global::Controls.Toolkit.SemanticZoomOutColumn(); }

        private object Activate_35_Step() { return new global::Controls.Toolkit.Step(); }

        private object Activate_36_StepIndicator() { return new global::Controls.Toolkit.StepIndicator(); }

        private object Activate_37_CascadingMenu() { return new global::Controls.Toolkit.CascadingMenu(); }

        private object Activate_38_SemanticZoomOutView() { return new global::Controls.Toolkit.SemanticZoomOutView(); }

        private object Activate_39_EdgePanel() { return new global::Controls.Toolkit.EdgePanel(); }

        private void VectorAdd_10_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Controls.Toolkit.Day>)instance;
            var newItem = (global::Controls.Toolkit.Day)item;
            collection.Add(newItem);
        }

        private void VectorAdd_11_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Controls.Toolkit.Day>)instance;
            var newItem = (global::Controls.Toolkit.Day)item;
            collection.Add(newItem);
        }

        private void VectorAdd_14_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Controls.Toolkit.Month>)instance;
            var newItem = (global::Controls.Toolkit.Month)item;
            collection.Add(newItem);
        }

        private void VectorAdd_15_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Controls.Toolkit.Month>)instance;
            var newItem = (global::Controls.Toolkit.Month)item;
            collection.Add(newItem);
        }

        private void VectorAdd_17_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Controls.Toolkit.Year>)instance;
            var newItem = (global::Controls.Toolkit.Year)item;
            collection.Add(newItem);
        }

        private void VectorAdd_18_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Controls.Toolkit.Year>)instance;
            var newItem = (global::Controls.Toolkit.Year)item;
            collection.Add(newItem);
        }

        private void VectorAdd_28_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Controls.Toolkit.MasonryItem>)instance;
            var newItem = (global::Controls.Toolkit.MasonryItem)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Object":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Windows.UI.Xaml.Style":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Style));
                break;

            case "Int32":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.Visibility":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Visibility));
                break;

            case "Windows.UI.Xaml.Media.Brush":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Brush));
                break;

            case "Boolean":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Double":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "String":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.Controls.Button":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Button));
                break;

            case "Windows.UI.Xaml.Controls.Primitives.ToggleButton":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton));
                break;

            case "Windows.UI.Xaml.Controls.ContentControl":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ContentControl));
                break;

            case "Windows.UI.Xaml.Controls.Border":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Border));
                break;

            case "Windows.UI.Xaml.Controls.Orientation":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Orientation));
                break;

            case "Windows.UI.Xaml.Controls.GridView":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.GridView));
                break;

            case "Windows.UI.Xaml.Controls.ItemsControl":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ItemsControl));
                break;

            case "Windows.UI.Xaml.Controls.Grid":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Grid));
                break;

            case "Windows.UI.Xaml.Controls.Panel":
                xamlType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Panel));
                break;

            case "Controls.Toolkit.MonthConverter":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.MonthConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_MonthConverter;
                xamlType = userType;
                break;

            case "Windows.UI.Color":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Color), GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("B");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("G");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                userType.AddMemberName("R");
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Byte":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Byte), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Byte),
                                                   "Byte");
                xamlType = userType;
                break;

            case "Controls.Toolkit.TimerSlider":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.TimerSlider), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_4_TimerSlider;
                userType.AddMemberName("ContentStyle");
                userType.AddMemberName("MaxValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("CurrentType");
                userType.AddMemberName("ShowTicksStyle");
                userType.AddMemberName("Value");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("TicksListVisibility");
                xamlType = userType;
                break;

            case "Controls.Toolkit.TimeType":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.TimeType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("HOUR", global::Controls.Toolkit.TimeType.HOUR);
                userType.AddEnumValue("MINUTE", global::Controls.Toolkit.TimeType.MINUTE);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "Controls.Toolkit.TimePicker":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.TimePicker), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_7_TimePicker;
                userType.AddMemberName("ForegroundBrush");
                xamlType = userType;
                break;

            case "Controls.Toolkit.CalendarPicker":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.CalendarPicker), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_8_CalendarPicker;
                userType.AddMemberName("TodayOfDate");
                userType.AddMemberName("StartDate");
                userType.AddMemberName("EndDate");
                userType.AddMemberName("ShowOtherMonth");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("YearOnDaysTitleBrush");
                userType.AddMemberName("MonthOnDaysTitleBrush");
                userType.AddMemberName("YearOnMonthsTitlBrush");
                userType.AddMemberName("MonthOnMonthsTitleBrush");
                userType.AddMemberName("PreviousButtonStyle");
                userType.AddMemberName("NextButtonStyle");
                userType.AddMemberName("WeekTitleBrush");
                userType.AddMemberName("FistAndLastWeekBrush");
                userType.AddMemberName("DayForground");
                userType.AddMemberName("FirstAndLastDayColumnForground");
                userType.AddMemberName("MonthStyle");
                userType.AddMemberName("SelectedMonthStyle");
                userType.AddMemberName("DaySelectedStyle");
                userType.AddMemberName("MonthSelectedStyle");
                userType.AddMemberName("OtherMonthDayBrush");
                userType.AddMemberName("DayStyle");
                userType.AddMemberName("SelectedAeroStyle");
                userType.AddMemberName("SelectedDayStyle");
                userType.AddMemberName("CalendarWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("CalendarHeight");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Days");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Day>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Day>");
                userType.AddMemberName("Months");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Month>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Month>");
                userType.AddMemberName("Years");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Year>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Year>");
                userType.AddMemberName("CurrentDateTime");
                userType.AddMemberName("SelectedDateTime");
                userType.AddMemberName("MonthTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("YearTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("HeaderWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GeneralDay");
                xamlType = userType;
                break;

            case "System.DateTime":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.DateTime), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Day>":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Day>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Controls.Toolkit.Day>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Day>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Day>");
                userType.Activator = Activate_10_ObservableCollection;
                userType.CollectionAdd = VectorAdd_10_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Controls.Toolkit.Day>":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Controls.Toolkit.Day>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Controls.Toolkit.Day>),
                                                   "System.Collections.ObjectModel.Collection<Controls.Toolkit.Day>");
                userType.Activator = Activate_11_Collection;
                userType.CollectionAdd = VectorAdd_11_Collection;
                xamlType = userType;
                break;

            case "Controls.Toolkit.Day":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.Day), GetXamlTypeByName("Controls.Toolkit.Date"));
                userType.Activator = Activate_12_Day;
                userType.AddMemberName("DayForeground");
                userType.AddMemberName("IsOtherMonth");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("DayStyle");
                userType.AddMemberName("IsInSelectedAero");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "Controls.Toolkit.Date":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.Date), GetXamlTypeByName("Object"));
                userType.AddMemberName("SelectedDate");
                userType.AddMemberName("CurrentDate");
                userType.AddMemberName("DefaultDate");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Month>":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Month>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Controls.Toolkit.Month>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Month>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Month>");
                userType.Activator = Activate_14_ObservableCollection;
                userType.CollectionAdd = VectorAdd_14_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Controls.Toolkit.Month>":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Controls.Toolkit.Month>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Controls.Toolkit.Month>),
                                                   "System.Collections.ObjectModel.Collection<Controls.Toolkit.Month>");
                userType.Activator = Activate_15_Collection;
                userType.CollectionAdd = VectorAdd_15_Collection;
                xamlType = userType;
                break;

            case "Controls.Toolkit.Month":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.Month), GetXamlTypeByName("Controls.Toolkit.Date"));
                userType.Activator = Activate_16_Month;
                userType.AddMemberName("Days");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Day>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Day>");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Year>":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Year>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Controls.Toolkit.Year>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Year>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Year>");
                userType.Activator = Activate_17_ObservableCollection;
                userType.CollectionAdd = VectorAdd_17_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Controls.Toolkit.Year>":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Controls.Toolkit.Year>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Controls.Toolkit.Year>),
                                                   "System.Collections.ObjectModel.Collection<Controls.Toolkit.Year>");
                userType.Activator = Activate_18_Collection;
                userType.CollectionAdd = VectorAdd_18_Collection;
                xamlType = userType;
                break;

            case "Controls.Toolkit.Year":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.Year), GetXamlTypeByName("Controls.Toolkit.Date"));
                userType.Activator = Activate_19_Year;
                userType.AddMemberName("Months");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Month>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Month>");
                xamlType = userType;
                break;

            case "Controls.Toolkit.CalendarHeader":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.CalendarHeader), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_20_CalendarHeader;
                userType.AddMemberName("MonthTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("YearTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("BtnRight");
                userType.AddMemberName("BtnLeft");
                xamlType = userType;
                break;

            case "Controls.Toolkit.CalendarYearHeadar":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.CalendarYearHeadar), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_21_CalendarYearHeadar;
                userType.AddMemberName("MonthTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("YearTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Controls.Toolkit.CalendarItemButton":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.CalendarItemButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Primitives.ToggleButton"));
                userType.Activator = Activate_22_CalendarItemButton;
                userType.AddMemberName("SelectedAeroStyle");
                userType.AddMemberName("SelectedDayStyle");
                userType.AddMemberName("FirstAndLastWeekStyle");
                userType.AddMemberName("BorderBase");
                xamlType = userType;
                break;

            case "Controls.Toolkit.CalendarItemMonthButton":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.CalendarItemMonthButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Primitives.ToggleButton"));
                userType.Activator = Activate_23_CalendarItemMonthButton;
                xamlType = userType;
                break;

            case "Controls.Toolkit.ContentTextBox":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.ContentTextBox), GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_24_ContentTextBox;
                userType.AddMemberName("Visibility");
                userType.AddMemberName("TextLength");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsOpen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("BackgroundOpacity");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "Controls.Toolkit.ContentTextBoxButton":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.ContentTextBoxButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_25_ContentTextBoxButton;
                xamlType = userType;
                break;

            case "Controls.Toolkit.Knob":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.Knob), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_26_Knob;
                userType.AddMemberName("TextVlaue");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Maximum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("FillBackground");
                userType.AddMemberName("PopColor");
                userType.AddMemberName("Background");
                userType.AddMemberName("Value");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Minimum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("MinValue");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("MaxValue");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Controls.Toolkit.MasonryPanel":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.MasonryPanel), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_27_MasonryPanel;
                userType.AddMemberName("Items");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::Controls.Toolkit.MasonryItem>),
                                                   "System.Collections.Generic.List<Controls.Toolkit.MasonryItem>");
                userType.AddMemberName("LayoutType");
                userType.AddMemberName("MaxnumHeight");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ElementInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("LargeImageNumber");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("MiddleImageNumber");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "System.Collections.Generic.List<Controls.Toolkit.MasonryItem>":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.List<global::Controls.Toolkit.MasonryItem>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::Controls.Toolkit.MasonryItem>),
                                                   "System.Collections.Generic.List<Controls.Toolkit.MasonryItem>");
                userType.Activator = Activate_28_List;
                userType.CollectionAdd = VectorAdd_28_List;
                xamlType = userType;
                break;

            case "Controls.Toolkit.MasonryItem":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.MasonryItem), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_29_MasonryItem;
                userType.AddMemberName("ItemWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ItemHeight");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Content");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("Id");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("ImageSource");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Controls.Toolkit.DisplayMode":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.DisplayMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Image", global::Controls.Toolkit.DisplayMode.Image);
                userType.AddEnumValue("Button", global::Controls.Toolkit.DisplayMode.Button);
                userType.AddEnumValue("Content", global::Controls.Toolkit.DisplayMode.Content);
                xamlType = userType;
                break;

            case "Controls.Toolkit.MasonryPanelLayoutType":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.MasonryPanelLayoutType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Controls.Toolkit.MasonryPanelLayoutType.Auto);
                userType.AddEnumValue("Row1", global::Controls.Toolkit.MasonryPanelLayoutType.Row1);
                userType.AddEnumValue("Row12", global::Controls.Toolkit.MasonryPanelLayoutType.Row12);
                userType.AddEnumValue("Row13", global::Controls.Toolkit.MasonryPanelLayoutType.Row13);
                userType.AddEnumValue("Row14", global::Controls.Toolkit.MasonryPanelLayoutType.Row14);
                userType.AddEnumValue("Row124", global::Controls.Toolkit.MasonryPanelLayoutType.Row124);
                userType.AddEnumValue("Row24", global::Controls.Toolkit.MasonryPanelLayoutType.Row24);
                userType.AddEnumValue("Row2", global::Controls.Toolkit.MasonryPanelLayoutType.Row2);
                userType.AddEnumValue("Row3", global::Controls.Toolkit.MasonryPanelLayoutType.Row3);
                userType.AddEnumValue("Row4", global::Controls.Toolkit.MasonryPanelLayoutType.Row4);
                xamlType = userType;
                break;

            case "Controls.Toolkit.RangeSlider":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.RangeSlider), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_32_RangeSlider;
                userType.AddMemberName("IsSingleSlider");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("FromThumbVisbilty");
                userType.AddMemberName("FromValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("RangeFrom");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("RangeTo");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Orientation");
                userType.AddMemberName("Minmum");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Maxmum");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("MinValue");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("MaxValue");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("SelectedBackground");
                userType.AddMemberName("CircleBackgroud");
                userType.AddMemberName("CicleOuterBackground");
                userType.AddMemberName("RangeFontForeground");
                userType.AddMemberName("Minimum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Maximum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Value");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Width");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Background");
                userType.AddMemberName("Foreground");
                xamlType = userType;
                break;

            case "Controls.Toolkit.SemanticZoomOutColumn":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.SemanticZoomOutColumn), GetXamlTypeByName("Controls.Toolkit.SemanticZoomOutItemBase"));
                userType.Activator = Activate_33_SemanticZoomOutColumn;
                xamlType = userType;
                break;

            case "Controls.Toolkit.SemanticZoomOutItemBase":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.SemanticZoomOutItemBase), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Count");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("ItemsCount");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Controls.Toolkit.Step":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.Step), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_35_Step;
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsFinished");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsInconformity");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SelectedBackground");
                userType.AddMemberName("FinishedBackground");
                xamlType = userType;
                break;

            case "Controls.Toolkit.StepIndicator":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.StepIndicator), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_36_StepIndicator;
                userType.AddMemberName("SelectedIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("DifferentTemplateIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "Controls.Toolkit.CascadingMenu":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.CascadingMenu), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_37_CascadingMenu;
                userType.AddMemberName("ItemsSource");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("ItemsPath");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Controls.Toolkit.SemanticZoomOutView":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.SemanticZoomOutView), GetXamlTypeByName("Windows.UI.Xaml.Controls.GridView"));
                userType.Activator = Activate_38_SemanticZoomOutView;
                userType.AddMemberName("MaxGroupItemsCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "Controls.Toolkit.EdgePanel":
                userType = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Controls.Toolkit.EdgePanel), GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_39_EdgePanel;
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_0_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_1_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_1_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_2_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_2_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_3_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_3_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_4_TimerSlider_ContentStyle(object instance)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            return that.ContentStyle;
        }
        private void set_4_TimerSlider_ContentStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            that.ContentStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_5_TimerSlider_MaxValue(object instance)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            return that.MaxValue;
        }
        private void set_5_TimerSlider_MaxValue(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            that.MaxValue = (global::System.Int32)Value;
        }
        private object get_6_TimerSlider_CurrentType(object instance)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            return that.CurrentType;
        }
        private void set_6_TimerSlider_CurrentType(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            that.CurrentType = (global::Controls.Toolkit.TimeType)Value;
        }
        private object get_7_TimerSlider_ShowTicksStyle(object instance)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            return that.ShowTicksStyle;
        }
        private void set_7_TimerSlider_ShowTicksStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            that.ShowTicksStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_8_TimerSlider_Value(object instance)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            return that.Value;
        }
        private void set_8_TimerSlider_Value(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            that.Value = (global::System.Int32)Value;
        }
        private object get_9_TimerSlider_TicksListVisibility(object instance)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            return that.TicksListVisibility;
        }
        private void set_9_TimerSlider_TicksListVisibility(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.TimerSlider)instance;
            that.TicksListVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_10_TimePicker_ForegroundBrush(object instance)
        {
            var that = (global::Controls.Toolkit.TimePicker)instance;
            return that.ForegroundBrush;
        }
        private void set_10_TimePicker_ForegroundBrush(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.TimePicker)instance;
            that.ForegroundBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_11_CalendarPicker_TodayOfDate(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.TodayOfDate;
        }
        private void set_11_CalendarPicker_TodayOfDate(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.TodayOfDate = (global::System.DateTime)Value;
        }
        private object get_12_CalendarPicker_StartDate(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.StartDate;
        }
        private void set_12_CalendarPicker_StartDate(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.StartDate = (global::System.DateTime)Value;
        }
        private object get_13_CalendarPicker_EndDate(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.EndDate;
        }
        private void set_13_CalendarPicker_EndDate(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.EndDate = (global::System.DateTime)Value;
        }
        private object get_14_CalendarPicker_ShowOtherMonth(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.ShowOtherMonth;
        }
        private void set_14_CalendarPicker_ShowOtherMonth(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.ShowOtherMonth = (global::System.Boolean)Value;
        }
        private object get_15_CalendarPicker_YearOnDaysTitleBrush(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.YearOnDaysTitleBrush;
        }
        private void set_15_CalendarPicker_YearOnDaysTitleBrush(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.YearOnDaysTitleBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_16_CalendarPicker_MonthOnDaysTitleBrush(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.MonthOnDaysTitleBrush;
        }
        private void set_16_CalendarPicker_MonthOnDaysTitleBrush(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.MonthOnDaysTitleBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_17_CalendarPicker_YearOnMonthsTitlBrush(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.YearOnMonthsTitlBrush;
        }
        private void set_17_CalendarPicker_YearOnMonthsTitlBrush(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.YearOnMonthsTitlBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_18_CalendarPicker_MonthOnMonthsTitleBrush(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.MonthOnMonthsTitleBrush;
        }
        private void set_18_CalendarPicker_MonthOnMonthsTitleBrush(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.MonthOnMonthsTitleBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_19_CalendarPicker_PreviousButtonStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.PreviousButtonStyle;
        }
        private void set_19_CalendarPicker_PreviousButtonStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.PreviousButtonStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_20_CalendarPicker_NextButtonStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.NextButtonStyle;
        }
        private void set_20_CalendarPicker_NextButtonStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.NextButtonStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_21_CalendarPicker_WeekTitleBrush(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.WeekTitleBrush;
        }
        private void set_21_CalendarPicker_WeekTitleBrush(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.WeekTitleBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_22_CalendarPicker_FistAndLastWeekBrush(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.FistAndLastWeekBrush;
        }
        private void set_22_CalendarPicker_FistAndLastWeekBrush(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.FistAndLastWeekBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_23_CalendarPicker_DayForground(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.DayForground;
        }
        private void set_23_CalendarPicker_DayForground(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.DayForground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_24_CalendarPicker_FirstAndLastDayColumnForground(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.FirstAndLastDayColumnForground;
        }
        private void set_24_CalendarPicker_FirstAndLastDayColumnForground(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.FirstAndLastDayColumnForground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_25_CalendarPicker_MonthStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.MonthStyle;
        }
        private void set_25_CalendarPicker_MonthStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.MonthStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_26_CalendarPicker_SelectedMonthStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.SelectedMonthStyle;
        }
        private void set_26_CalendarPicker_SelectedMonthStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.SelectedMonthStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_27_CalendarPicker_DaySelectedStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.DaySelectedStyle;
        }
        private void set_27_CalendarPicker_DaySelectedStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.DaySelectedStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_28_CalendarPicker_MonthSelectedStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.MonthSelectedStyle;
        }
        private void set_28_CalendarPicker_MonthSelectedStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.MonthSelectedStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_29_CalendarPicker_OtherMonthDayBrush(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.OtherMonthDayBrush;
        }
        private void set_29_CalendarPicker_OtherMonthDayBrush(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.OtherMonthDayBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_30_CalendarPicker_DayStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.DayStyle;
        }
        private void set_30_CalendarPicker_DayStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.DayStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_31_CalendarPicker_SelectedAeroStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.SelectedAeroStyle;
        }
        private void set_31_CalendarPicker_SelectedAeroStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.SelectedAeroStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_32_CalendarPicker_SelectedDayStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.SelectedDayStyle;
        }
        private void set_32_CalendarPicker_SelectedDayStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.SelectedDayStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_33_CalendarPicker_CalendarWidth(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.CalendarWidth;
        }
        private void set_33_CalendarPicker_CalendarWidth(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.CalendarWidth = (global::System.Double)Value;
        }
        private object get_34_CalendarPicker_CalendarHeight(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.CalendarHeight;
        }
        private void set_34_CalendarPicker_CalendarHeight(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.CalendarHeight = (global::System.Double)Value;
        }
        private object get_35_CalendarPicker_Days(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.Days;
        }
        private void set_35_CalendarPicker_Days(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.Days = (global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Day>)Value;
        }
        private object get_36_Day_DayForeground(object instance)
        {
            var that = (global::Controls.Toolkit.Day)instance;
            return that.DayForeground;
        }
        private void set_36_Day_DayForeground(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Day)instance;
            that.DayForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_37_Day_IsOtherMonth(object instance)
        {
            var that = (global::Controls.Toolkit.Day)instance;
            return that.IsOtherMonth;
        }
        private void set_37_Day_IsOtherMonth(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Day)instance;
            that.IsOtherMonth = (global::System.Boolean)Value;
        }
        private object get_38_Day_DayStyle(object instance)
        {
            var that = (global::Controls.Toolkit.Day)instance;
            return that.DayStyle;
        }
        private void set_38_Day_DayStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Day)instance;
            that.DayStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_39_Day_IsInSelectedAero(object instance)
        {
            var that = (global::Controls.Toolkit.Day)instance;
            return that.IsInSelectedAero;
        }
        private void set_39_Day_IsInSelectedAero(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Day)instance;
            that.IsInSelectedAero = (global::System.Boolean)Value;
        }
        private object get_40_Date_SelectedDate(object instance)
        {
            var that = (global::Controls.Toolkit.Date)instance;
            return that.SelectedDate;
        }
        private void set_40_Date_SelectedDate(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Date)instance;
            that.SelectedDate = (global::System.DateTime)Value;
        }
        private object get_41_Date_CurrentDate(object instance)
        {
            var that = (global::Controls.Toolkit.Date)instance;
            return that.CurrentDate;
        }
        private void set_41_Date_CurrentDate(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Date)instance;
            that.CurrentDate = (global::System.DateTime)Value;
        }
        private object get_42_Date_DefaultDate(object instance)
        {
            var that = (global::Controls.Toolkit.Date)instance;
            return that.DefaultDate;
        }
        private void set_42_Date_DefaultDate(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Date)instance;
            that.DefaultDate = (global::System.DateTime)Value;
        }
        private object get_43_CalendarPicker_Months(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.Months;
        }
        private void set_43_CalendarPicker_Months(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.Months = (global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Month>)Value;
        }
        private object get_44_Month_Days(object instance)
        {
            var that = (global::Controls.Toolkit.Month)instance;
            return that.Days;
        }
        private void set_44_Month_Days(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Month)instance;
            that.Days = (global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Day>)Value;
        }
        private object get_45_CalendarPicker_Years(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.Years;
        }
        private void set_45_CalendarPicker_Years(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.Years = (global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Year>)Value;
        }
        private object get_46_Year_Months(object instance)
        {
            var that = (global::Controls.Toolkit.Year)instance;
            return that.Months;
        }
        private void set_46_Year_Months(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Year)instance;
            that.Months = (global::System.Collections.ObjectModel.ObservableCollection<global::Controls.Toolkit.Month>)Value;
        }
        private object get_47_CalendarPicker_CurrentDateTime(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.CurrentDateTime;
        }
        private void set_47_CalendarPicker_CurrentDateTime(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.CurrentDateTime = (global::System.DateTime)Value;
        }
        private object get_48_CalendarPicker_SelectedDateTime(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.SelectedDateTime;
        }
        private void set_48_CalendarPicker_SelectedDateTime(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.SelectedDateTime = (global::System.DateTime)Value;
        }
        private object get_49_CalendarPicker_MonthTitle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.MonthTitle;
        }
        private void set_49_CalendarPicker_MonthTitle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.MonthTitle = (global::System.Int32)Value;
        }
        private object get_50_CalendarPicker_YearTitle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.YearTitle;
        }
        private void set_50_CalendarPicker_YearTitle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.YearTitle = (global::System.Int32)Value;
        }
        private object get_51_CalendarPicker_HeaderWidth(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.HeaderWidth;
        }
        private void set_51_CalendarPicker_HeaderWidth(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.HeaderWidth = (global::System.Double)Value;
        }
        private object get_52_CalendarPicker_GeneralDay(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            return that.GeneralDay;
        }
        private void set_52_CalendarPicker_GeneralDay(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarPicker)instance;
            that.GeneralDay = (global::Controls.Toolkit.Day)Value;
        }
        private object get_53_CalendarHeader_MonthTitle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarHeader)instance;
            return that.MonthTitle;
        }
        private void set_53_CalendarHeader_MonthTitle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarHeader)instance;
            that.MonthTitle = (global::System.String)Value;
        }
        private object get_54_CalendarHeader_YearTitle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarHeader)instance;
            return that.YearTitle;
        }
        private void set_54_CalendarHeader_YearTitle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarHeader)instance;
            that.YearTitle = (global::System.String)Value;
        }
        private object get_55_CalendarHeader_BtnRight(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarHeader)instance;
            return that.BtnRight;
        }
        private void set_55_CalendarHeader_BtnRight(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarHeader)instance;
            that.BtnRight = (global::Windows.UI.Xaml.Controls.Button)Value;
        }
        private object get_56_CalendarHeader_BtnLeft(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarHeader)instance;
            return that.BtnLeft;
        }
        private void set_56_CalendarHeader_BtnLeft(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarHeader)instance;
            that.BtnLeft = (global::Windows.UI.Xaml.Controls.Button)Value;
        }
        private object get_57_CalendarYearHeadar_MonthTitle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarYearHeadar)instance;
            return that.MonthTitle;
        }
        private void set_57_CalendarYearHeadar_MonthTitle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarYearHeadar)instance;
            that.MonthTitle = (global::System.String)Value;
        }
        private object get_58_CalendarYearHeadar_YearTitle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarYearHeadar)instance;
            return that.YearTitle;
        }
        private void set_58_CalendarYearHeadar_YearTitle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarYearHeadar)instance;
            that.YearTitle = (global::System.String)Value;
        }
        private object get_59_CalendarItemButton_SelectedAeroStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarItemButton)instance;
            return that.SelectedAeroStyle;
        }
        private void set_59_CalendarItemButton_SelectedAeroStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarItemButton)instance;
            that.SelectedAeroStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_60_CalendarItemButton_SelectedDayStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarItemButton)instance;
            return that.SelectedDayStyle;
        }
        private void set_60_CalendarItemButton_SelectedDayStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarItemButton)instance;
            that.SelectedDayStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_61_CalendarItemButton_FirstAndLastWeekStyle(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarItemButton)instance;
            return that.FirstAndLastWeekStyle;
        }
        private void set_61_CalendarItemButton_FirstAndLastWeekStyle(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarItemButton)instance;
            that.FirstAndLastWeekStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_62_CalendarItemButton_BorderBase(object instance)
        {
            var that = (global::Controls.Toolkit.CalendarItemButton)instance;
            return that.BorderBase;
        }
        private void set_62_CalendarItemButton_BorderBase(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CalendarItemButton)instance;
            that.BorderBase = (global::Windows.UI.Xaml.Controls.Border)Value;
        }
        private object get_63_ContentTextBox_Visibility(object instance)
        {
            var that = (global::Controls.Toolkit.ContentTextBox)instance;
            return that.Visibility;
        }
        private void set_63_ContentTextBox_Visibility(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.ContentTextBox)instance;
            that.Visibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_64_ContentTextBox_TextLength(object instance)
        {
            var that = (global::Controls.Toolkit.ContentTextBox)instance;
            return that.TextLength;
        }
        private object get_65_ContentTextBox_Text(object instance)
        {
            var that = (global::Controls.Toolkit.ContentTextBox)instance;
            return that.Text;
        }
        private void set_65_ContentTextBox_Text(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.ContentTextBox)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_66_ContentTextBox_IsOpen(object instance)
        {
            var that = (global::Controls.Toolkit.ContentTextBox)instance;
            return that.IsOpen;
        }
        private void set_66_ContentTextBox_IsOpen(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.ContentTextBox)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_67_ContentTextBox_BackgroundOpacity(object instance)
        {
            var that = (global::Controls.Toolkit.ContentTextBox)instance;
            return that.BackgroundOpacity;
        }
        private void set_67_ContentTextBox_BackgroundOpacity(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.ContentTextBox)instance;
            that.BackgroundOpacity = (global::System.Double)Value;
        }
        private object get_68_Knob_TextVlaue(object instance)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            return that.TextVlaue;
        }
        private object get_69_Knob_Maximum(object instance)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            return that.Maximum;
        }
        private void set_69_Knob_Maximum(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_70_Knob_FillBackground(object instance)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            return that.FillBackground;
        }
        private void set_70_Knob_FillBackground(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            that.FillBackground = (global::Windows.UI.Color)Value;
        }
        private object get_71_Knob_PopColor(object instance)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            return that.PopColor;
        }
        private object get_72_Knob_Background(object instance)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            return that.Background;
        }
        private void set_72_Knob_Background(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            that.Background = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_73_Knob_Value(object instance)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            return that.Value;
        }
        private void set_73_Knob_Value(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_74_Knob_Minimum(object instance)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            return that.Minimum;
        }
        private void set_74_Knob_Minimum(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_75_Knob_MinValue(object instance)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            return that.MinValue;
        }
        private object get_76_Knob_MaxValue(object instance)
        {
            var that = (global::Controls.Toolkit.Knob)instance;
            return that.MaxValue;
        }
        private object get_77_MasonryPanel_Items(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            return that.Items;
        }
        private void set_77_MasonryPanel_Items(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            that.Items = (global::System.Collections.Generic.List<global::Controls.Toolkit.MasonryItem>)Value;
        }
        private object get_78_MasonryItem_ItemWidth(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            return that.ItemWidth;
        }
        private void set_78_MasonryItem_ItemWidth(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            that.ItemWidth = (global::System.Double)Value;
        }
        private object get_79_MasonryItem_ItemHeight(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            return that.ItemHeight;
        }
        private void set_79_MasonryItem_ItemHeight(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            that.ItemHeight = (global::System.Double)Value;
        }
        private object get_80_MasonryItem_Content(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            return that.Content;
        }
        private void set_80_MasonryItem_Content(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_81_MasonryItem_DisplayMode(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            return that.DisplayMode;
        }
        private void set_81_MasonryItem_DisplayMode(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            that.DisplayMode = (global::Controls.Toolkit.DisplayMode)Value;
        }
        private object get_82_MasonryItem_Id(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            return that.Id;
        }
        private void set_82_MasonryItem_Id(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            that.Id = (global::System.Int32)Value;
        }
        private object get_83_MasonryItem_ImageSource(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            return that.ImageSource;
        }
        private void set_83_MasonryItem_ImageSource(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryItem)instance;
            that.ImageSource = (global::System.String)Value;
        }
        private object get_84_MasonryPanel_LayoutType(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            return that.LayoutType;
        }
        private void set_84_MasonryPanel_LayoutType(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            that.LayoutType = (global::Controls.Toolkit.MasonryPanelLayoutType)Value;
        }
        private object get_85_MasonryPanel_MaxnumHeight(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            return that.MaxnumHeight;
        }
        private void set_85_MasonryPanel_MaxnumHeight(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            that.MaxnumHeight = (global::System.Double)Value;
        }
        private object get_86_MasonryPanel_ElementInterval(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            return that.ElementInterval;
        }
        private void set_86_MasonryPanel_ElementInterval(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            that.ElementInterval = (global::System.Double)Value;
        }
        private object get_87_MasonryPanel_LargeImageNumber(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            return that.LargeImageNumber;
        }
        private void set_87_MasonryPanel_LargeImageNumber(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            that.LargeImageNumber = (global::System.Int32)Value;
        }
        private object get_88_MasonryPanel_MiddleImageNumber(object instance)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            return that.MiddleImageNumber;
        }
        private void set_88_MasonryPanel_MiddleImageNumber(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.MasonryPanel)instance;
            that.MiddleImageNumber = (global::System.Int32)Value;
        }
        private object get_89_RangeSlider_IsSingleSlider(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.IsSingleSlider;
        }
        private void set_89_RangeSlider_IsSingleSlider(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.IsSingleSlider = (global::System.Boolean)Value;
        }
        private object get_90_RangeSlider_FromThumbVisbilty(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.FromThumbVisbilty;
        }
        private object get_91_RangeSlider_FromValue(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.FromValue;
        }
        private void set_91_RangeSlider_FromValue(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.FromValue = (global::System.Double)Value;
        }
        private object get_92_RangeSlider_RangeFrom(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.RangeFrom;
        }
        private object get_93_RangeSlider_RangeTo(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.RangeTo;
        }
        private object get_94_RangeSlider_Orientation(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.Orientation;
        }
        private void set_94_RangeSlider_Orientation(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_95_RangeSlider_Minmum(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.Minmum;
        }
        private object get_96_RangeSlider_Maxmum(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.Maxmum;
        }
        private object get_97_RangeSlider_MinValue(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.MinValue;
        }
        private object get_98_RangeSlider_MaxValue(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.MaxValue;
        }
        private object get_99_RangeSlider_SelectedBackground(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.SelectedBackground;
        }
        private void set_99_RangeSlider_SelectedBackground(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.SelectedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_100_RangeSlider_CircleBackgroud(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.CircleBackgroud;
        }
        private void set_100_RangeSlider_CircleBackgroud(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.CircleBackgroud = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_101_RangeSlider_CicleOuterBackground(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.CicleOuterBackground;
        }
        private void set_101_RangeSlider_CicleOuterBackground(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.CicleOuterBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_102_RangeSlider_RangeFontForeground(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.RangeFontForeground;
        }
        private void set_102_RangeSlider_RangeFontForeground(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.RangeFontForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_103_RangeSlider_Minimum(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.Minimum;
        }
        private void set_103_RangeSlider_Minimum(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_104_RangeSlider_Maximum(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.Maximum;
        }
        private void set_104_RangeSlider_Maximum(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_105_RangeSlider_Value(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.Value;
        }
        private void set_105_RangeSlider_Value(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_106_RangeSlider_Width(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.Width;
        }
        private void set_106_RangeSlider_Width(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_107_RangeSlider_Background(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.Background;
        }
        private void set_107_RangeSlider_Background(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.Background = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_108_RangeSlider_Foreground(object instance)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            return that.Foreground;
        }
        private void set_108_RangeSlider_Foreground(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.RangeSlider)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_109_SemanticZoomOutItemBase_Text(object instance)
        {
            var that = (global::Controls.Toolkit.SemanticZoomOutItemBase)instance;
            return that.Text;
        }
        private void set_109_SemanticZoomOutItemBase_Text(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.SemanticZoomOutItemBase)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_110_SemanticZoomOutItemBase_Count(object instance)
        {
            var that = (global::Controls.Toolkit.SemanticZoomOutItemBase)instance;
            return that.Count;
        }
        private void set_110_SemanticZoomOutItemBase_Count(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.SemanticZoomOutItemBase)instance;
            that.Count = (global::System.Int32)Value;
        }
        private object get_111_SemanticZoomOutItemBase_ItemsCount(object instance)
        {
            var that = (global::Controls.Toolkit.SemanticZoomOutItemBase)instance;
            return that.ItemsCount;
        }
        private object get_112_Step_Text(object instance)
        {
            var that = (global::Controls.Toolkit.Step)instance;
            return that.Text;
        }
        private void set_112_Step_Text(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Step)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_113_Step_IsFinished(object instance)
        {
            var that = (global::Controls.Toolkit.Step)instance;
            return that.IsFinished;
        }
        private void set_113_Step_IsFinished(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Step)instance;
            that.IsFinished = (global::System.Boolean)Value;
        }
        private object get_114_Step_IsInconformity(object instance)
        {
            var that = (global::Controls.Toolkit.Step)instance;
            return that.IsInconformity;
        }
        private void set_114_Step_IsInconformity(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Step)instance;
            that.IsInconformity = (global::System.Boolean)Value;
        }
        private object get_115_Step_SelectedBackground(object instance)
        {
            var that = (global::Controls.Toolkit.Step)instance;
            return that.SelectedBackground;
        }
        private void set_115_Step_SelectedBackground(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Step)instance;
            that.SelectedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_116_Step_FinishedBackground(object instance)
        {
            var that = (global::Controls.Toolkit.Step)instance;
            return that.FinishedBackground;
        }
        private void set_116_Step_FinishedBackground(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.Step)instance;
            that.FinishedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_117_StepIndicator_SelectedIndex(object instance)
        {
            var that = (global::Controls.Toolkit.StepIndicator)instance;
            return that.SelectedIndex;
        }
        private void set_117_StepIndicator_SelectedIndex(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.StepIndicator)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_118_StepIndicator_DifferentTemplateIndex(object instance)
        {
            var that = (global::Controls.Toolkit.StepIndicator)instance;
            return that.DifferentTemplateIndex;
        }
        private void set_118_StepIndicator_DifferentTemplateIndex(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.StepIndicator)instance;
            that.DifferentTemplateIndex = (global::System.Int32)Value;
        }
        private object get_119_CascadingMenu_ItemsSource(object instance)
        {
            var that = (global::Controls.Toolkit.CascadingMenu)instance;
            return that.ItemsSource;
        }
        private void set_119_CascadingMenu_ItemsSource(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CascadingMenu)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_120_CascadingMenu_ItemsPath(object instance)
        {
            var that = (global::Controls.Toolkit.CascadingMenu)instance;
            return that.ItemsPath;
        }
        private void set_120_CascadingMenu_ItemsPath(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.CascadingMenu)instance;
            that.ItemsPath = (global::System.String)Value;
        }
        private object get_121_SemanticZoomOutView_MaxGroupItemsCount(object instance)
        {
            var that = (global::Controls.Toolkit.SemanticZoomOutView)instance;
            return that.MaxGroupItemsCount;
        }
        private void set_121_SemanticZoomOutView_MaxGroupItemsCount(object instance, object Value)
        {
            var that = (global::Controls.Toolkit.SemanticZoomOutView)instance;
            that.MaxGroupItemsCount = (global::System.Int32)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember xamlMember = null;
            global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Windows.UI.Color.A":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_0_Color_A;
                xamlMember.Setter = set_0_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_1_Color_B;
                xamlMember.Setter = set_1_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_2_Color_G;
                xamlMember.Setter = set_2_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_3_Color_R;
                xamlMember.Setter = set_3_Color_R;
                break;
            case "Controls.Toolkit.TimerSlider.ContentStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.TimerSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "ContentStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_TimerSlider_ContentStyle;
                xamlMember.Setter = set_4_TimerSlider_ContentStyle;
                break;
            case "Controls.Toolkit.TimerSlider.MaxValue":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.TimerSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MaxValue", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_TimerSlider_MaxValue;
                xamlMember.Setter = set_5_TimerSlider_MaxValue;
                break;
            case "Controls.Toolkit.TimerSlider.CurrentType":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.TimerSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "CurrentType", "Controls.Toolkit.TimeType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_TimerSlider_CurrentType;
                xamlMember.Setter = set_6_TimerSlider_CurrentType;
                break;
            case "Controls.Toolkit.TimerSlider.ShowTicksStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.TimerSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "ShowTicksStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_TimerSlider_ShowTicksStyle;
                xamlMember.Setter = set_7_TimerSlider_ShowTicksStyle;
                break;
            case "Controls.Toolkit.TimerSlider.Value":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.TimerSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Value", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_TimerSlider_Value;
                xamlMember.Setter = set_8_TimerSlider_Value;
                break;
            case "Controls.Toolkit.TimerSlider.TicksListVisibility":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.TimerSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "TicksListVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_TimerSlider_TicksListVisibility;
                xamlMember.Setter = set_9_TimerSlider_TicksListVisibility;
                break;
            case "Controls.Toolkit.TimePicker.ForegroundBrush":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.TimePicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "ForegroundBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_TimePicker_ForegroundBrush;
                xamlMember.Setter = set_10_TimePicker_ForegroundBrush;
                break;
            case "Controls.Toolkit.CalendarPicker.TodayOfDate":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "TodayOfDate", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_CalendarPicker_TodayOfDate;
                xamlMember.Setter = set_11_CalendarPicker_TodayOfDate;
                break;
            case "Controls.Toolkit.CalendarPicker.StartDate":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "StartDate", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_CalendarPicker_StartDate;
                xamlMember.Setter = set_12_CalendarPicker_StartDate;
                break;
            case "Controls.Toolkit.CalendarPicker.EndDate":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "EndDate", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_CalendarPicker_EndDate;
                xamlMember.Setter = set_13_CalendarPicker_EndDate;
                break;
            case "Controls.Toolkit.CalendarPicker.ShowOtherMonth":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "ShowOtherMonth", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_CalendarPicker_ShowOtherMonth;
                xamlMember.Setter = set_14_CalendarPicker_ShowOtherMonth;
                break;
            case "Controls.Toolkit.CalendarPicker.YearOnDaysTitleBrush":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "YearOnDaysTitleBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_CalendarPicker_YearOnDaysTitleBrush;
                xamlMember.Setter = set_15_CalendarPicker_YearOnDaysTitleBrush;
                break;
            case "Controls.Toolkit.CalendarPicker.MonthOnDaysTitleBrush":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MonthOnDaysTitleBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_CalendarPicker_MonthOnDaysTitleBrush;
                xamlMember.Setter = set_16_CalendarPicker_MonthOnDaysTitleBrush;
                break;
            case "Controls.Toolkit.CalendarPicker.YearOnMonthsTitlBrush":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "YearOnMonthsTitlBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_CalendarPicker_YearOnMonthsTitlBrush;
                xamlMember.Setter = set_17_CalendarPicker_YearOnMonthsTitlBrush;
                break;
            case "Controls.Toolkit.CalendarPicker.MonthOnMonthsTitleBrush":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MonthOnMonthsTitleBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_CalendarPicker_MonthOnMonthsTitleBrush;
                xamlMember.Setter = set_18_CalendarPicker_MonthOnMonthsTitleBrush;
                break;
            case "Controls.Toolkit.CalendarPicker.PreviousButtonStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "PreviousButtonStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_CalendarPicker_PreviousButtonStyle;
                xamlMember.Setter = set_19_CalendarPicker_PreviousButtonStyle;
                break;
            case "Controls.Toolkit.CalendarPicker.NextButtonStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "NextButtonStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_CalendarPicker_NextButtonStyle;
                xamlMember.Setter = set_20_CalendarPicker_NextButtonStyle;
                break;
            case "Controls.Toolkit.CalendarPicker.WeekTitleBrush":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "WeekTitleBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_CalendarPicker_WeekTitleBrush;
                xamlMember.Setter = set_21_CalendarPicker_WeekTitleBrush;
                break;
            case "Controls.Toolkit.CalendarPicker.FistAndLastWeekBrush":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "FistAndLastWeekBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_CalendarPicker_FistAndLastWeekBrush;
                xamlMember.Setter = set_22_CalendarPicker_FistAndLastWeekBrush;
                break;
            case "Controls.Toolkit.CalendarPicker.DayForground":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "DayForground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_CalendarPicker_DayForground;
                xamlMember.Setter = set_23_CalendarPicker_DayForground;
                break;
            case "Controls.Toolkit.CalendarPicker.FirstAndLastDayColumnForground":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "FirstAndLastDayColumnForground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_CalendarPicker_FirstAndLastDayColumnForground;
                xamlMember.Setter = set_24_CalendarPicker_FirstAndLastDayColumnForground;
                break;
            case "Controls.Toolkit.CalendarPicker.MonthStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MonthStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_CalendarPicker_MonthStyle;
                xamlMember.Setter = set_25_CalendarPicker_MonthStyle;
                break;
            case "Controls.Toolkit.CalendarPicker.SelectedMonthStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "SelectedMonthStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_CalendarPicker_SelectedMonthStyle;
                xamlMember.Setter = set_26_CalendarPicker_SelectedMonthStyle;
                break;
            case "Controls.Toolkit.CalendarPicker.DaySelectedStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "DaySelectedStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_CalendarPicker_DaySelectedStyle;
                xamlMember.Setter = set_27_CalendarPicker_DaySelectedStyle;
                break;
            case "Controls.Toolkit.CalendarPicker.MonthSelectedStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MonthSelectedStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_CalendarPicker_MonthSelectedStyle;
                xamlMember.Setter = set_28_CalendarPicker_MonthSelectedStyle;
                break;
            case "Controls.Toolkit.CalendarPicker.OtherMonthDayBrush":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "OtherMonthDayBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_CalendarPicker_OtherMonthDayBrush;
                xamlMember.Setter = set_29_CalendarPicker_OtherMonthDayBrush;
                break;
            case "Controls.Toolkit.CalendarPicker.DayStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "DayStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_CalendarPicker_DayStyle;
                xamlMember.Setter = set_30_CalendarPicker_DayStyle;
                break;
            case "Controls.Toolkit.CalendarPicker.SelectedAeroStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "SelectedAeroStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_CalendarPicker_SelectedAeroStyle;
                xamlMember.Setter = set_31_CalendarPicker_SelectedAeroStyle;
                break;
            case "Controls.Toolkit.CalendarPicker.SelectedDayStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "SelectedDayStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_CalendarPicker_SelectedDayStyle;
                xamlMember.Setter = set_32_CalendarPicker_SelectedDayStyle;
                break;
            case "Controls.Toolkit.CalendarPicker.CalendarWidth":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "CalendarWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_CalendarPicker_CalendarWidth;
                xamlMember.Setter = set_33_CalendarPicker_CalendarWidth;
                break;
            case "Controls.Toolkit.CalendarPicker.CalendarHeight":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "CalendarHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_CalendarPicker_CalendarHeight;
                xamlMember.Setter = set_34_CalendarPicker_CalendarHeight;
                break;
            case "Controls.Toolkit.CalendarPicker.Days":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Days", "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Day>");
                xamlMember.Getter = get_35_CalendarPicker_Days;
                xamlMember.Setter = set_35_CalendarPicker_Days;
                break;
            case "Controls.Toolkit.Day.DayForeground":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Day");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "DayForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_36_Day_DayForeground;
                xamlMember.Setter = set_36_Day_DayForeground;
                break;
            case "Controls.Toolkit.Day.IsOtherMonth":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Day");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "IsOtherMonth", "Boolean");
                xamlMember.Getter = get_37_Day_IsOtherMonth;
                xamlMember.Setter = set_37_Day_IsOtherMonth;
                break;
            case "Controls.Toolkit.Day.DayStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Day");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "DayStyle", "Windows.UI.Xaml.Style");
                xamlMember.Getter = get_38_Day_DayStyle;
                xamlMember.Setter = set_38_Day_DayStyle;
                break;
            case "Controls.Toolkit.Day.IsInSelectedAero":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Day");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "IsInSelectedAero", "Boolean");
                xamlMember.Getter = get_39_Day_IsInSelectedAero;
                xamlMember.Setter = set_39_Day_IsInSelectedAero;
                break;
            case "Controls.Toolkit.Date.SelectedDate":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Date");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "SelectedDate", "System.DateTime");
                xamlMember.Getter = get_40_Date_SelectedDate;
                xamlMember.Setter = set_40_Date_SelectedDate;
                break;
            case "Controls.Toolkit.Date.CurrentDate":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Date");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "CurrentDate", "System.DateTime");
                xamlMember.Getter = get_41_Date_CurrentDate;
                xamlMember.Setter = set_41_Date_CurrentDate;
                break;
            case "Controls.Toolkit.Date.DefaultDate":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Date");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "DefaultDate", "System.DateTime");
                xamlMember.Getter = get_42_Date_DefaultDate;
                xamlMember.Setter = set_42_Date_DefaultDate;
                break;
            case "Controls.Toolkit.CalendarPicker.Months":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Months", "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Month>");
                xamlMember.Getter = get_43_CalendarPicker_Months;
                xamlMember.Setter = set_43_CalendarPicker_Months;
                break;
            case "Controls.Toolkit.Month.Days":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Month");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Days", "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Day>");
                xamlMember.Getter = get_44_Month_Days;
                xamlMember.Setter = set_44_Month_Days;
                break;
            case "Controls.Toolkit.CalendarPicker.Years":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Years", "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Year>");
                xamlMember.Getter = get_45_CalendarPicker_Years;
                xamlMember.Setter = set_45_CalendarPicker_Years;
                break;
            case "Controls.Toolkit.Year.Months":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Year");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Months", "System.Collections.ObjectModel.ObservableCollection<Controls.Toolkit.Month>");
                xamlMember.Getter = get_46_Year_Months;
                xamlMember.Setter = set_46_Year_Months;
                break;
            case "Controls.Toolkit.CalendarPicker.CurrentDateTime":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "CurrentDateTime", "System.DateTime");
                xamlMember.Getter = get_47_CalendarPicker_CurrentDateTime;
                xamlMember.Setter = set_47_CalendarPicker_CurrentDateTime;
                break;
            case "Controls.Toolkit.CalendarPicker.SelectedDateTime":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "SelectedDateTime", "System.DateTime");
                xamlMember.Getter = get_48_CalendarPicker_SelectedDateTime;
                xamlMember.Setter = set_48_CalendarPicker_SelectedDateTime;
                break;
            case "Controls.Toolkit.CalendarPicker.MonthTitle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MonthTitle", "Int32");
                xamlMember.Getter = get_49_CalendarPicker_MonthTitle;
                xamlMember.Setter = set_49_CalendarPicker_MonthTitle;
                break;
            case "Controls.Toolkit.CalendarPicker.YearTitle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "YearTitle", "Int32");
                xamlMember.Getter = get_50_CalendarPicker_YearTitle;
                xamlMember.Setter = set_50_CalendarPicker_YearTitle;
                break;
            case "Controls.Toolkit.CalendarPicker.HeaderWidth":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "HeaderWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_CalendarPicker_HeaderWidth;
                xamlMember.Setter = set_51_CalendarPicker_HeaderWidth;
                break;
            case "Controls.Toolkit.CalendarPicker.GeneralDay":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarPicker");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "GeneralDay", "Controls.Toolkit.Day");
                xamlMember.Getter = get_52_CalendarPicker_GeneralDay;
                xamlMember.Setter = set_52_CalendarPicker_GeneralDay;
                break;
            case "Controls.Toolkit.CalendarHeader.MonthTitle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarHeader");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MonthTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_CalendarHeader_MonthTitle;
                xamlMember.Setter = set_53_CalendarHeader_MonthTitle;
                break;
            case "Controls.Toolkit.CalendarHeader.YearTitle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarHeader");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "YearTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_CalendarHeader_YearTitle;
                xamlMember.Setter = set_54_CalendarHeader_YearTitle;
                break;
            case "Controls.Toolkit.CalendarHeader.BtnRight":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarHeader");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "BtnRight", "Windows.UI.Xaml.Controls.Button");
                xamlMember.Getter = get_55_CalendarHeader_BtnRight;
                xamlMember.Setter = set_55_CalendarHeader_BtnRight;
                break;
            case "Controls.Toolkit.CalendarHeader.BtnLeft":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarHeader");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "BtnLeft", "Windows.UI.Xaml.Controls.Button");
                xamlMember.Getter = get_56_CalendarHeader_BtnLeft;
                xamlMember.Setter = set_56_CalendarHeader_BtnLeft;
                break;
            case "Controls.Toolkit.CalendarYearHeadar.MonthTitle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarYearHeadar");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MonthTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_CalendarYearHeadar_MonthTitle;
                xamlMember.Setter = set_57_CalendarYearHeadar_MonthTitle;
                break;
            case "Controls.Toolkit.CalendarYearHeadar.YearTitle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarYearHeadar");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "YearTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_CalendarYearHeadar_YearTitle;
                xamlMember.Setter = set_58_CalendarYearHeadar_YearTitle;
                break;
            case "Controls.Toolkit.CalendarItemButton.SelectedAeroStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarItemButton");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "SelectedAeroStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_CalendarItemButton_SelectedAeroStyle;
                xamlMember.Setter = set_59_CalendarItemButton_SelectedAeroStyle;
                break;
            case "Controls.Toolkit.CalendarItemButton.SelectedDayStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarItemButton");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "SelectedDayStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_CalendarItemButton_SelectedDayStyle;
                xamlMember.Setter = set_60_CalendarItemButton_SelectedDayStyle;
                break;
            case "Controls.Toolkit.CalendarItemButton.FirstAndLastWeekStyle":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarItemButton");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "FirstAndLastWeekStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_CalendarItemButton_FirstAndLastWeekStyle;
                xamlMember.Setter = set_61_CalendarItemButton_FirstAndLastWeekStyle;
                break;
            case "Controls.Toolkit.CalendarItemButton.BorderBase":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CalendarItemButton");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "BorderBase", "Windows.UI.Xaml.Controls.Border");
                xamlMember.Getter = get_62_CalendarItemButton_BorderBase;
                xamlMember.Setter = set_62_CalendarItemButton_BorderBase;
                break;
            case "Controls.Toolkit.ContentTextBox.Visibility":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.ContentTextBox");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Visibility", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_63_ContentTextBox_Visibility;
                xamlMember.Setter = set_63_ContentTextBox_Visibility;
                break;
            case "Controls.Toolkit.ContentTextBox.TextLength":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.ContentTextBox");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "TextLength", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_ContentTextBox_TextLength;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.ContentTextBox.Text":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.ContentTextBox");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_ContentTextBox_Text;
                xamlMember.Setter = set_65_ContentTextBox_Text;
                break;
            case "Controls.Toolkit.ContentTextBox.IsOpen":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.ContentTextBox");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_ContentTextBox_IsOpen;
                xamlMember.Setter = set_66_ContentTextBox_IsOpen;
                break;
            case "Controls.Toolkit.ContentTextBox.BackgroundOpacity":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.ContentTextBox");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "BackgroundOpacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_ContentTextBox_BackgroundOpacity;
                xamlMember.Setter = set_67_ContentTextBox_BackgroundOpacity;
                break;
            case "Controls.Toolkit.Knob.TextVlaue":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Knob");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "TextVlaue", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_Knob_TextVlaue;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.Knob.Maximum":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Knob");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_Knob_Maximum;
                xamlMember.Setter = set_69_Knob_Maximum;
                break;
            case "Controls.Toolkit.Knob.FillBackground":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Knob");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "FillBackground", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_Knob_FillBackground;
                xamlMember.Setter = set_70_Knob_FillBackground;
                break;
            case "Controls.Toolkit.Knob.PopColor":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Knob");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "PopColor", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_Knob_PopColor;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.Knob.Background":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Knob");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Background", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_Knob_Background;
                xamlMember.Setter = set_72_Knob_Background;
                break;
            case "Controls.Toolkit.Knob.Value":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Knob");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_Knob_Value;
                xamlMember.Setter = set_73_Knob_Value;
                break;
            case "Controls.Toolkit.Knob.Minimum":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Knob");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_Knob_Minimum;
                xamlMember.Setter = set_74_Knob_Minimum;
                break;
            case "Controls.Toolkit.Knob.MinValue":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Knob");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MinValue", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_Knob_MinValue;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.Knob.MaxValue":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Knob");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MaxValue", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_Knob_MaxValue;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.MasonryPanel.Items":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryPanel");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.List<Controls.Toolkit.MasonryItem>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_MasonryPanel_Items;
                xamlMember.Setter = set_77_MasonryPanel_Items;
                break;
            case "Controls.Toolkit.MasonryItem.ItemWidth":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryItem");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "ItemWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_MasonryItem_ItemWidth;
                xamlMember.Setter = set_78_MasonryItem_ItemWidth;
                break;
            case "Controls.Toolkit.MasonryItem.ItemHeight":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryItem");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "ItemHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_MasonryItem_ItemHeight;
                xamlMember.Setter = set_79_MasonryItem_ItemHeight;
                break;
            case "Controls.Toolkit.MasonryItem.Content":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryItem");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_MasonryItem_Content;
                xamlMember.Setter = set_80_MasonryItem_Content;
                break;
            case "Controls.Toolkit.MasonryItem.DisplayMode":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryItem");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "DisplayMode", "Controls.Toolkit.DisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_MasonryItem_DisplayMode;
                xamlMember.Setter = set_81_MasonryItem_DisplayMode;
                break;
            case "Controls.Toolkit.MasonryItem.Id":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryItem");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Id", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_MasonryItem_Id;
                xamlMember.Setter = set_82_MasonryItem_Id;
                break;
            case "Controls.Toolkit.MasonryItem.ImageSource":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryItem");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "ImageSource", "String");
                xamlMember.Getter = get_83_MasonryItem_ImageSource;
                xamlMember.Setter = set_83_MasonryItem_ImageSource;
                break;
            case "Controls.Toolkit.MasonryPanel.LayoutType":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryPanel");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "LayoutType", "Controls.Toolkit.MasonryPanelLayoutType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_MasonryPanel_LayoutType;
                xamlMember.Setter = set_84_MasonryPanel_LayoutType;
                break;
            case "Controls.Toolkit.MasonryPanel.MaxnumHeight":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryPanel");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MaxnumHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_MasonryPanel_MaxnumHeight;
                xamlMember.Setter = set_85_MasonryPanel_MaxnumHeight;
                break;
            case "Controls.Toolkit.MasonryPanel.ElementInterval":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryPanel");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "ElementInterval", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_MasonryPanel_ElementInterval;
                xamlMember.Setter = set_86_MasonryPanel_ElementInterval;
                break;
            case "Controls.Toolkit.MasonryPanel.LargeImageNumber":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryPanel");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "LargeImageNumber", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_MasonryPanel_LargeImageNumber;
                xamlMember.Setter = set_87_MasonryPanel_LargeImageNumber;
                break;
            case "Controls.Toolkit.MasonryPanel.MiddleImageNumber":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.MasonryPanel");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MiddleImageNumber", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_MasonryPanel_MiddleImageNumber;
                xamlMember.Setter = set_88_MasonryPanel_MiddleImageNumber;
                break;
            case "Controls.Toolkit.RangeSlider.IsSingleSlider":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "IsSingleSlider", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_RangeSlider_IsSingleSlider;
                xamlMember.Setter = set_89_RangeSlider_IsSingleSlider;
                break;
            case "Controls.Toolkit.RangeSlider.FromThumbVisbilty":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "FromThumbVisbilty", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_RangeSlider_FromThumbVisbilty;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.RangeSlider.FromValue":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "FromValue", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_RangeSlider_FromValue;
                xamlMember.Setter = set_91_RangeSlider_FromValue;
                break;
            case "Controls.Toolkit.RangeSlider.RangeFrom":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "RangeFrom", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_RangeSlider_RangeFrom;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.RangeSlider.RangeTo":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "RangeTo", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_RangeSlider_RangeTo;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.RangeSlider.Orientation":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_RangeSlider_Orientation;
                xamlMember.Setter = set_94_RangeSlider_Orientation;
                break;
            case "Controls.Toolkit.RangeSlider.Minmum":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Minmum", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_RangeSlider_Minmum;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.RangeSlider.Maxmum":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Maxmum", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_RangeSlider_Maxmum;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.RangeSlider.MinValue":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MinValue", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_RangeSlider_MinValue;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.RangeSlider.MaxValue":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MaxValue", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_RangeSlider_MaxValue;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.RangeSlider.SelectedBackground":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "SelectedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_RangeSlider_SelectedBackground;
                xamlMember.Setter = set_99_RangeSlider_SelectedBackground;
                break;
            case "Controls.Toolkit.RangeSlider.CircleBackgroud":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "CircleBackgroud", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_RangeSlider_CircleBackgroud;
                xamlMember.Setter = set_100_RangeSlider_CircleBackgroud;
                break;
            case "Controls.Toolkit.RangeSlider.CicleOuterBackground":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "CicleOuterBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_RangeSlider_CicleOuterBackground;
                xamlMember.Setter = set_101_RangeSlider_CicleOuterBackground;
                break;
            case "Controls.Toolkit.RangeSlider.RangeFontForeground":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "RangeFontForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_RangeSlider_RangeFontForeground;
                xamlMember.Setter = set_102_RangeSlider_RangeFontForeground;
                break;
            case "Controls.Toolkit.RangeSlider.Minimum":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_RangeSlider_Minimum;
                xamlMember.Setter = set_103_RangeSlider_Minimum;
                break;
            case "Controls.Toolkit.RangeSlider.Maximum":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_RangeSlider_Maximum;
                xamlMember.Setter = set_104_RangeSlider_Maximum;
                break;
            case "Controls.Toolkit.RangeSlider.Value":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_RangeSlider_Value;
                xamlMember.Setter = set_105_RangeSlider_Value;
                break;
            case "Controls.Toolkit.RangeSlider.Width":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_RangeSlider_Width;
                xamlMember.Setter = set_106_RangeSlider_Width;
                break;
            case "Controls.Toolkit.RangeSlider.Background":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Background", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_RangeSlider_Background;
                xamlMember.Setter = set_107_RangeSlider_Background;
                break;
            case "Controls.Toolkit.RangeSlider.Foreground":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.RangeSlider");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_RangeSlider_Foreground;
                xamlMember.Setter = set_108_RangeSlider_Foreground;
                break;
            case "Controls.Toolkit.SemanticZoomOutItemBase.Text":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.SemanticZoomOutItemBase");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_SemanticZoomOutItemBase_Text;
                xamlMember.Setter = set_109_SemanticZoomOutItemBase_Text;
                break;
            case "Controls.Toolkit.SemanticZoomOutItemBase.Count":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.SemanticZoomOutItemBase");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_SemanticZoomOutItemBase_Count;
                xamlMember.Setter = set_110_SemanticZoomOutItemBase_Count;
                break;
            case "Controls.Toolkit.SemanticZoomOutItemBase.ItemsCount":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.SemanticZoomOutItemBase");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "ItemsCount", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_SemanticZoomOutItemBase_ItemsCount;
                xamlMember.SetIsReadOnly();
                break;
            case "Controls.Toolkit.Step.Text":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Step");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_Step_Text;
                xamlMember.Setter = set_112_Step_Text;
                break;
            case "Controls.Toolkit.Step.IsFinished":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Step");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "IsFinished", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_Step_IsFinished;
                xamlMember.Setter = set_113_Step_IsFinished;
                break;
            case "Controls.Toolkit.Step.IsInconformity":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Step");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "IsInconformity", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_Step_IsInconformity;
                xamlMember.Setter = set_114_Step_IsInconformity;
                break;
            case "Controls.Toolkit.Step.SelectedBackground":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Step");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "SelectedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_Step_SelectedBackground;
                xamlMember.Setter = set_115_Step_SelectedBackground;
                break;
            case "Controls.Toolkit.Step.FinishedBackground":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.Step");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "FinishedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_Step_FinishedBackground;
                xamlMember.Setter = set_116_Step_FinishedBackground;
                break;
            case "Controls.Toolkit.StepIndicator.SelectedIndex":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.StepIndicator");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_StepIndicator_SelectedIndex;
                xamlMember.Setter = set_117_StepIndicator_SelectedIndex;
                break;
            case "Controls.Toolkit.StepIndicator.DifferentTemplateIndex":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.StepIndicator");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "DifferentTemplateIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_StepIndicator_DifferentTemplateIndex;
                xamlMember.Setter = set_118_StepIndicator_DifferentTemplateIndex;
                break;
            case "Controls.Toolkit.CascadingMenu.ItemsSource":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CascadingMenu");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_CascadingMenu_ItemsSource;
                xamlMember.Setter = set_119_CascadingMenu_ItemsSource;
                break;
            case "Controls.Toolkit.CascadingMenu.ItemsPath":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.CascadingMenu");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "ItemsPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_CascadingMenu_ItemsPath;
                xamlMember.Setter = set_120_CascadingMenu_ItemsPath;
                break;
            case "Controls.Toolkit.SemanticZoomOutView.MaxGroupItemsCount":
                userType = (global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Controls.Toolkit.SemanticZoomOutView");
                xamlMember = new global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlMember(this, "MaxGroupItemsCount", "Int32");
                xamlMember.Getter = get_121_SemanticZoomOutView_MaxGroupItemsCount;
                xamlMember.Setter = set_121_SemanticZoomOutView_MaxGroupItemsCount;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlSystemBaseType
    {
        global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Controls.Toolkit.Controls_Toolkit_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


